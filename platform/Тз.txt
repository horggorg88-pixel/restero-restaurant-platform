Iaroslav Luka, [30.09.2025 13:46]
# UML-диаграмма системы управления ресторанами

## 1. Диаграмма вариантов использования (Use Case Diagram)

Акторы:
- Гость
- Пользователь
- Администратор

Варианты использования:
- Регистрация
- Вход
- Восстановление пароля
- Подтверждение email
- Личный кабинет
- Управление ресторанами
- Объединение в сеть
- Оплата
- Создать ресторан
- Дать доступ администратору
- Открыть список доступов
- Открыть страницу ресторана
- Объединить рестораны в сеть
- Оплата по карте
- Управление пользователями
- Управление доступами

Связи:
Гость → Регистрация → Подтверждение email → Личный кабинет
Гость → Вход → Личный кабинет
Гость → Восстановление пароля → Вход → Личный кабинет
Пользователь → Личный кабинет → Управление ресторанами
Пользователь → Личный кабинет → Объединение в сеть
Пользователь → Личный кабинет → Оплата
Администратор → Управление ресторанами
Администратор → Дать доступ администратору
Администратор → Открыть список доступов
Администратор → Открыть страницу ресторана
Администратор → Объединить рестораны в сеть
Администратор → Управление пользователями
Администратор → Управление доступами


## 2. Диаграмма классов (Class Diagram)

Классы и атрибуты:

Пользователь

id: int
имя: string
фамилия: string
email: string
пароль: string
верификацияПройдена: boolean
датаПоследнегоВхода: date
регистрация()
вход()
восстановитьПароль()
подтвердитьEmail()
Ресторан

id: int
название: string
адрес: string
фотография: image
создать()
датьДоступАдминистратору()
открытьСписокДоступов()
открытьСтраницуРесторана()
СетьРесторанов

id: int
название: string
описание: string
объединитьРестораны()
управлятьСетью()
Доступ

id: int
idПользователя: int
idРесторана: int
email: string
ссылкаНаСтраницу: string
отправитьДоступы()
удалитьДоступ()
Запись

id: int
idПользователя: int
idРесторана: int
дата: datetime
создатьЗапись()
отменитьЗапись()
Оплата

id: int
idРесторана: int
сумма: decimal
дата: date
оплатить()
проверитьПлатеж()


Отношения между классами:

Пользователь "1" -- "" Доступ : имеет
Ресторан "1" -- "" Доступ : предоставляет
Ресторан "0..1" -- "1" СетьРесторанов : принадлежит
Пользователь "1" -- "" Запись : делает
Ресторан "1" -- "" Запись : принимает
Ресторан "1" -- "*" Оплата : имеет


## 3. Диаграмма последовательности: Регистрация пользователя

Участники:
- Гость
- Система
- База данных
- Email

Последовательность действий:

Гость → Система: Ввод данных (имя, фамилия, email, пароль)
Система → База данных: Сохранение пользователя (верификацияПройдена=false)
База данных → Система: Пользователь создан
Система → Email: Отправка письма с ссылкой подтверждения
Email → Гость: Письмо со ссылкой
Гость → Система: Переход по ссылке
Система → База данных: Обновление (верификацияПройдена=true)
База данных → Система: Подтверждено
Система → Гость: Перенаправление на страницу входа


## 4. Диаграмма последовательности: Объединение ресторанов в сеть

Участники:
- Администратор
- Система
- База данных
- Сеть ресторанов

Последовательность действий:

Администратор → Система: Выбор ресторанов для объединения
Администратор → Система: Ввод названия сети и описания
Система → База данных: Создание записи сети
База данных → Система: Сеть создана
Система → База данных: Обновление ресторанов (присвоение id сети)
База данных → Система: Рестораны обновлены
Система → Администратор: Успешное объединение


## 5. Диаграмма состояний: Управление доступами

Состояния:
- НетДоступа
- ЗапросДоступа
- ДоступПредоставлен
- ДоступАктивен
- ДоступОтозван

Переходы:

НетДоступа → ЗапросДоступа: Дать доступ администратору
ЗапросДоступа → ДоступПредоставлен: Отправка доступов
ДоступПредоставлен → ДоступАктивен: Подтверждение администратором
ДоступАктивен → ДоступОтозван: Удалить доступ
ДоступОтозван → [Конечное состояние]
ДоступАктивен → ДоступАктивен: Открыть список доступов (самопереход)


## 6. Диаграмма компонентов: Архитектура системы

Компоненты:

Iaroslav Luka, [30.09.2025 13:46]
Пользовательский интерфейс
│
└── Контроллер
│
├── Сервис пользователей
├── Сервис ресторанов
├── Сервис доступов
├── Сервис сетей
└── Сервис оплат
│
├── Репозиторий пользователей
├── Репозиторий ресторанов
├── Репозиторий доступов
├── Репозиторий сетей
└── Репозиторий оплат
│
├── Таблица пользователей
├── Таблица ресторанов
├── Таблица доступов
├── Таблица сетей
└── Таблица оплат


## 7. Диаграмма развертывания: Инфраструктура системы

Узлы и связи:
Клиент
│
└── Веб-сервер
│
└── Сервер приложений
├── API
├── Бизнес-логика
└── ORM
│
├── СУБД
├── Почтовый сервер
└── Платежный шлюз

## Ключевые особенности системы

### 1. Управление доступами
- Поддержка двух типов пользователей: администраторы и хостес
- Администратор может выдавать доступы хостесам
- Управление доступами на уровне ресторанов

### 2. Объединение в сеть
- Визуальное управление объединенными ресторанами
- Возможность объединения баз клиентов между ресторанами сети
- Доработки по выводу пользователя при записи

### 3. Тарификация
- Фиксированная цена за один ресторан
- Отдельная оплата за объединение в сеть

### 4. Безопасность
- Подтверждение email при регистрации
- Восстановление пароля через email
- Генерация паролей для доступов

### 5. Управление ресторанами
- Создание новых ресторанов
- Управление фотографиями
- Выдача доступов администраторам
- Открытие страниц ресторанов